// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	option "github.com/dtc03012/me/db/option"
	mock "github.com/stretchr/testify/mock"

	post "github.com/dtc03012/me/protobuf/proto/entity/post"

	sql "database/sql"

	sqlx "github.com/jmoiron/sqlx"
)

// DBService is an autogenerated mock type for the DBService type
type DBService struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *DBService) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	ret := _m.Called(ctx, opts)

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAdminPassword provides a mock function with given fields: ctx, tx, password
func (_m *DBService) CheckAdminPassword(ctx context.Context, tx *sqlx.Tx, password string) (bool, error) {
	ret := _m.Called(ctx, tx, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, string) bool); ok {
		r0 = rf(ctx, tx, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, string) error); ok {
		r1 = rf(ctx, tx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, tx, postId, commentId
func (_m *DBService) DeleteComment(ctx context.Context, tx *sqlx.Tx, postId int, commentId int) error {
	ret := _m.Called(ctx, tx, postId, commentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int) error); ok {
		r0 = rf(ctx, tx, postId, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCommentList provides a mock function with given fields: ctx, tx, opt
func (_m *DBService) FetchCommentList(ctx context.Context, tx *sqlx.Tx, opt *option.CommentOption) ([]*post.Comment, error) {
	ret := _m.Called(ctx, tx, opt)

	var r0 []*post.Comment
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *option.CommentOption) []*post.Comment); ok {
		r0 = rf(ctx, tx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *option.CommentOption) error); ok {
		r1 = rf(ctx, tx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPost provides a mock function with given fields: ctx, tx, postId
func (_m *DBService) FetchPost(ctx context.Context, tx *sqlx.Tx, postId int) (*post.Data, error) {
	ret := _m.Called(ctx, tx, postId)

	var r0 *post.Data
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int) *post.Data); ok {
		r0 = rf(ctx, tx, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, int) error); ok {
		r1 = rf(ctx, tx, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPostList provides a mock function with given fields: ctx, tx, row, size
func (_m *DBService) FetchPostList(ctx context.Context, tx *sqlx.Tx, row int, size int) ([]*post.Data, error) {
	ret := _m.Called(ctx, tx, row, size)

	var r0 []*post.Data
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, int) []*post.Data); ok {
		r0 = rf(ctx, tx, row, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, int, int) error); ok {
		r1 = rf(ctx, tx, row, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAdminUUID provides a mock function with given fields: ctx, tx, uuid
func (_m *DBService) FindAdminUUID(ctx context.Context, tx *sqlx.Tx, uuid string) (bool, error) {
	ret := _m.Called(ctx, tx, uuid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, string) bool); ok {
		r0 = rf(ctx, tx, uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, string) error); ok {
		r1 = rf(ctx, tx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalCommentCount provides a mock function with given fields: ctx, tx, pid
func (_m *DBService) GetTotalCommentCount(ctx context.Context, tx *sqlx.Tx, pid int) (int32, error) {
	ret := _m.Called(ctx, tx, pid)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int) int32); ok {
		r0 = rf(ctx, tx, pid)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, int) error); ok {
		r1 = rf(ctx, tx, pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPostCount provides a mock function with given fields: ctx, tx
func (_m *DBService) GetTotalPostCount(ctx context.Context, tx *sqlx.Tx) (int32, error) {
	ret := _m.Called(ctx, tx)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx) int32); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementViews provides a mock function with given fields: ctx, tx, postId, uuid
func (_m *DBService) IncrementViews(ctx context.Context, tx *sqlx.Tx, postId int, uuid string) error {
	ret := _m.Called(ctx, tx, postId, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, int, string) error); ok {
		r0 = rf(ctx, tx, postId, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAdminUUID provides a mock function with given fields: ctx, tx, uuid
func (_m *DBService) InsertAdminUUID(ctx context.Context, tx *sqlx.Tx, uuid string) error {
	ret := _m.Called(ctx, tx, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, string) error); ok {
		r0 = rf(ctx, tx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LeaveComment provides a mock function with given fields: ctx, tx, comment
func (_m *DBService) LeaveComment(ctx context.Context, tx *sqlx.Tx, comment *post.Comment) error {
	ret := _m.Called(ctx, tx, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *post.Comment) error); ok {
		r0 = rf(ctx, tx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryPostList provides a mock function with given fields: ctx, tx, opt
func (_m *DBService) QueryPostList(ctx context.Context, tx *sqlx.Tx, opt *option.PostOption) ([]*post.Data, error) {
	ret := _m.Called(ctx, tx, opt)

	var r0 []*post.Data
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *option.PostOption) []*post.Data); ok {
		r0 = rf(ctx, tx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *option.PostOption) error); ok {
		r1 = rf(ctx, tx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadPost provides a mock function with given fields: ctx, tx, postData
func (_m *DBService) UploadPost(ctx context.Context, tx *sqlx.Tx, postData *post.Data) error {
	ret := _m.Called(ctx, tx, postData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *post.Data) error); ok {
		r0 = rf(ctx, tx, postData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDBService interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBService creates a new instance of DBService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBService(t mockConstructorTestingTNewDBService) *DBService {
	mock := &DBService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
