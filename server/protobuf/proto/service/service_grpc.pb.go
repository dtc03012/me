// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/service/service.proto

package service

import (
	context "context"
	message "github.com/dtc03012/me/protobuf/proto/service/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeClient is the client API for Me service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeClient interface {
	FindAdminUUID(ctx context.Context, in *message.FindAdminUUIDRequest, opts ...grpc.CallOption) (*message.FindAdminUUIDResponse, error)
	InsertAdminUUID(ctx context.Context, in *message.InsertAdminUUIDRequest, opts ...grpc.CallOption) (*message.InsertAdminUUIDResponse, error)
	LoginAdmin(ctx context.Context, in *message.LoginAdminRequest, opts ...grpc.CallOption) (*message.LoginAdminResponse, error)
	CheckDistrictWeather(ctx context.Context, in *message.CheckDistrictWeatherRequest, opts ...grpc.CallOption) (*message.CheckDistrictWeatherResponse, error)
}

type meClient struct {
	cc grpc.ClientConnInterface
}

func NewMeClient(cc grpc.ClientConnInterface) MeClient {
	return &meClient{cc}
}

func (c *meClient) FindAdminUUID(ctx context.Context, in *message.FindAdminUUIDRequest, opts ...grpc.CallOption) (*message.FindAdminUUIDResponse, error) {
	out := new(message.FindAdminUUIDResponse)
	err := c.cc.Invoke(ctx, "/v2.service.me/FindAdminUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meClient) InsertAdminUUID(ctx context.Context, in *message.InsertAdminUUIDRequest, opts ...grpc.CallOption) (*message.InsertAdminUUIDResponse, error) {
	out := new(message.InsertAdminUUIDResponse)
	err := c.cc.Invoke(ctx, "/v2.service.me/InsertAdminUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meClient) LoginAdmin(ctx context.Context, in *message.LoginAdminRequest, opts ...grpc.CallOption) (*message.LoginAdminResponse, error) {
	out := new(message.LoginAdminResponse)
	err := c.cc.Invoke(ctx, "/v2.service.me/LoginAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meClient) CheckDistrictWeather(ctx context.Context, in *message.CheckDistrictWeatherRequest, opts ...grpc.CallOption) (*message.CheckDistrictWeatherResponse, error) {
	out := new(message.CheckDistrictWeatherResponse)
	err := c.cc.Invoke(ctx, "/v2.service.me/CheckDistrictWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeServer is the server API for Me service.
// All implementations must embed UnimplementedMeServer
// for forward compatibility
type MeServer interface {
	FindAdminUUID(context.Context, *message.FindAdminUUIDRequest) (*message.FindAdminUUIDResponse, error)
	InsertAdminUUID(context.Context, *message.InsertAdminUUIDRequest) (*message.InsertAdminUUIDResponse, error)
	LoginAdmin(context.Context, *message.LoginAdminRequest) (*message.LoginAdminResponse, error)
	CheckDistrictWeather(context.Context, *message.CheckDistrictWeatherRequest) (*message.CheckDistrictWeatherResponse, error)
	mustEmbedUnimplementedMeServer()
}

// UnimplementedMeServer must be embedded to have forward compatible implementations.
type UnimplementedMeServer struct {
}

func (UnimplementedMeServer) FindAdminUUID(context.Context, *message.FindAdminUUIDRequest) (*message.FindAdminUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAdminUUID not implemented")
}
func (UnimplementedMeServer) InsertAdminUUID(context.Context, *message.InsertAdminUUIDRequest) (*message.InsertAdminUUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAdminUUID not implemented")
}
func (UnimplementedMeServer) LoginAdmin(context.Context, *message.LoginAdminRequest) (*message.LoginAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedMeServer) CheckDistrictWeather(context.Context, *message.CheckDistrictWeatherRequest) (*message.CheckDistrictWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDistrictWeather not implemented")
}
func (UnimplementedMeServer) mustEmbedUnimplementedMeServer() {}

// UnsafeMeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeServer will
// result in compilation errors.
type UnsafeMeServer interface {
	mustEmbedUnimplementedMeServer()
}

func RegisterMeServer(s grpc.ServiceRegistrar, srv MeServer) {
	s.RegisterService(&Me_ServiceDesc, srv)
}

func _Me_FindAdminUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.FindAdminUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).FindAdminUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.service.me/FindAdminUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).FindAdminUUID(ctx, req.(*message.FindAdminUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Me_InsertAdminUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.InsertAdminUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).InsertAdminUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.service.me/InsertAdminUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).InsertAdminUUID(ctx, req.(*message.InsertAdminUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Me_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.LoginAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.service.me/LoginAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).LoginAdmin(ctx, req.(*message.LoginAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Me_CheckDistrictWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CheckDistrictWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeServer).CheckDistrictWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.service.me/CheckDistrictWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeServer).CheckDistrictWeather(ctx, req.(*message.CheckDistrictWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Me_ServiceDesc is the grpc.ServiceDesc for Me service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Me_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.service.me",
	HandlerType: (*MeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAdminUUID",
			Handler:    _Me_FindAdminUUID_Handler,
		},
		{
			MethodName: "InsertAdminUUID",
			Handler:    _Me_InsertAdminUUID_Handler,
		},
		{
			MethodName: "LoginAdmin",
			Handler:    _Me_LoginAdmin_Handler,
		},
		{
			MethodName: "CheckDistrictWeather",
			Handler:    _Me_CheckDistrictWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/service.proto",
}
